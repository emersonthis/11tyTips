<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>11tyTips blog</title>
  <subtitle>Hot tips for 11ty static site generator users</subtitle>
  <link href="https://11tytips.netlify.com/feed.xml" rel="self"/>
  <link href="https://11tytips.netlify.com/"/>
  <updated>2019-09-10T02:00:00+02:00</updated>
  <id>https://11tytips.netlify.com/</id>
  <author>
    <name>Octoxalis</name>
    <email>octoxalis@gmail.com</email>
  </author>

  <entry>
    <title>Site structure</title>
    <link href="https://11tytips.netlify.com/tips/site_structure.html"/>
    <updated>2019-09-02T02:00:00+02:00</updated>
    <id>https://11tytips.netlify.com/tips/site_structure.html</id>
    <content type="html">&lt;h2&gt;The JAMstack architecture&lt;/h2&gt;
&lt;p&gt;Eleventy, as most static sites, relies on an architectural paradigm called &lt;a href=&quot;https://jamstack.org/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot;&gt;JAMstack&lt;/a&gt;, an acronym meaning: &lt;q&gt;a modern web development architecture based on client-side JavaScript, reusable APIs, and prebuilt Markup.&lt;/q&gt;
&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;
See Mathias Biilmann &amp;amp; Phil Hawksworth book: &lt;a href=&quot;https://www.netlify.com/pdf/oreilly-modern-web-development-on-the-jamstack.pdf&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot;&gt;Modern Web development on the JAMstack&lt;/a&gt;.
&lt;/span&gt;&lt;/ins&gt;.&lt;/p&gt;
&lt;p&gt;In the JAMstack architecture, &lt;em&gt;JavaScript&lt;/em&gt; is used not only in the browser for interactivity and presentation but also to build all the files of the site
&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;
This is the case of Eleventy. Other generators use different languages: Go, Python, etc.
&lt;/span&gt;&lt;/ins&gt;
; the &lt;em&gt;APIs&lt;/em&gt; are the programming interfaces to Node packages
&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;
Eleventy itself is a Node package.
&lt;/span&gt;&lt;/ins&gt;
or other frameworks used as a back end; &lt;em&gt;Markdown&lt;/em&gt; is used to set the content of each page of the site, with a settings part (front matter) using either JavaScript or a description language like YAML or TOML and a template part
&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;
There are many templating systems: Liquid, Nunjucks, Hanbdlebars, Pug, etc.
&lt;/span&gt;&lt;/ins&gt;
.&lt;/p&gt;
&lt;h2&gt;11tyTips architecture&lt;/h2&gt;
&lt;p&gt;Trying to stay as simple as possible, 11tyTips is built using a minimal set of the JAMstack architecture: JavaScript backed by the Node ecosystem, Nunjucks as templating system and Markdown as content markup language.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;source&lt;/code&gt; directory is designed to reflect these categories of resources:&lt;/p&gt;
&lt;ul data--=&quot;ulist&quot;&gt;
&lt;li&gt;build
&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;
Contains JavaScript modules to be used during the build process. For consistancy with other source script directories, it is deeply refined in &lt;code&gt;script/js/&lt;/code&gt; and split in two directories: Eleventy modules (&lt;code&gt;11ty&lt;/code&gt;) and 11tyTips modules (&lt;code&gt;lib&lt;/code&gt;).
&lt;/span&gt;&lt;/ins&gt;&lt;/li&gt;
&lt;li&gt;includes
&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;
Gathers all the templates used either by the Markdown files (&lt;code&gt;templates&lt;/code&gt;) or the Javascript and CSS files to be joined and minified (&lt;code&gt;assets&lt;/code&gt;).
&lt;/span&gt;&lt;/ins&gt;&lt;/li&gt;
&lt;li&gt;content &amp;amp; data
&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;
The first directory contains the Markdown files of all site posts, plus some files included in them;
the second one gathers JavaScript data modules consumed by the Markdown content files.
&lt;/span&gt;&lt;/ins&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A further directory is added to contain all the third-party assets used by the site: &lt;em&gt;fonts&lt;/em&gt;, &lt;em&gt;media&lt;/em&gt;, &lt;em&gt;scripts&lt;/em&gt; and &lt;em&gt;styles&lt;/em&gt; which are passthru copied to the built site directory.&lt;/p&gt;
&lt;p&gt;This structure has been designed to offer the maximum of flexibility and consistence in the development phase, keeping a strong separation of concerns as to ease any needed refactoring and modification of the code.&lt;/p&gt;
</content>
  </entry>

  <entry>
    <title>Cloning 11tyTips site</title>
    <link href="https://11tytips.netlify.com/tips/site_cloning.html"/>
    <updated>2019-09-03T02:00:00+02:00</updated>
    <id>https://11tytips.netlify.com/tips/site_cloning.html</id>
    <content type="html">&lt;h2&gt;Install a clone of 11tyTips site&lt;/h2&gt;
&lt;p&gt;11tyTips site has been carefully designed to help those who want to start to use a static site generator such as Eleventy without spending a lot of time to find the best architecture meeting their needs.&lt;/p&gt;
&lt;p&gt;A static site is built with three different components:&lt;/p&gt;
&lt;ul data--=&quot;ulist&quot;&gt;
&lt;li&gt;assets (fonts, media, scripts, styles);&lt;/li&gt;
&lt;li&gt;templates (proto html files with placeholders);&lt;/li&gt;
&lt;li&gt;content (actual content to inject in the template files).&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>

  <entry>
    <title>Source tree</title>
    <link href="https://11tytips.netlify.com/tips/source_tree.html"/>
    <updated>2019-09-04T02:00:00+02:00</updated>
    <id>https://11tytips.netlify.com/tips/source_tree.html</id>
    <content type="html">&lt;h2&gt;11tyTips site&lt;/h2&gt;
&lt;hgroup data--=&quot;code_ref&quot;&gt;
&lt;h5&gt;11tyTips source tree&lt;/h5&gt;
&lt;h6&gt;&lt;a href=&quot;https://prismjs.com&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot; title=&quot;Highlighting provided by Prism.js&quot;&gt;Prism&lt;/a&gt;&lt;/h6&gt;
&lt;/hgroup&gt;
&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;
source
├── assets
│   ├── fonts
│   │   ├── athiti-v3-latin-regular.woff2
│   │   ├── FiraCode-Regular.woff2
│   │   └── harmattan-v5-latin-regular.woff2
│   ├── media
│   │   ├── android-chrome-192x192.png
│   │   ├── android-chrome-512x512.png
│   │   ├── apple-touch-icon.png
│   │   ├── favicon-16x16.png
│   │   └── favicon-32x32.png
│   ├── scripts
│   │   └── js
│   │       └── prism.min.js
│   ├── styles
│   │   └── css
│   │       └── prism.min.css
│   └── site.webmanifest
├── build
│   └── scripts
│       └── js
│           ├── 11ty
│           │   ├── collections.js
│           │   ├── filters.js
│           │   ├── libraries.js
│           │   ├── plugins.js
│           │   └── shortcodes.js
│           └── lib
│               ├── block_replace.js
│               └── block_split.js
├── content
│   ├── includes
│   │   └── source_tree.txt
│   └── posts
│       ├── 404.md
│       ├── eleventy_settings.md
│       ├── feed.md
│       ├── frontmatter_data.md
│       ├── index.md
│       ├── names_guide.md
│       ├── shortcodes.md
│       ├── site_cloning.md
│       ├── site_settings.md
│       ├── site_structure.md
│       ├── source_tree.md
│       ├── styles_guide.md
│       └── tips_list.md
├── data
│   ├── lib
│   │   └── utils.js
│   ├── _C.js
│   ├── descriptions.js
│   └── settings.js
├── includes
│   ├── assets
│   │   ├── scripts
│   │   │   └── js
│   │   │       ├── lib
│   │   │       │   └── _instant_page_.njk
│   │   │       ├── partials
│   │   │       │   ├── dom.js
│   │   │       │   └── ui.js
│   │   │       ├── _site_url_.njk
│   │   │       └── base.njk
│   │   └── styles
│   │       └── css
│   │           ├── partials
│   │           │   ├── aspect_ratio.css
│   │           │   ├── color.css
│   │           │   ├── comments.css
│   │           │   ├── dark_mode.css
│   │           │   ├── destyle.css
│   │           │   ├── font.css
│   │           │   ├── fonts_inline.css
│   │           │   ├── full_width.css
│   │           │   ├── html.css
│   │           │   ├── notes.css
│   │           │   ├── prism_theme.css
│   │           │   ├── rootvar.css
│   │           │   ├── sitetree.css
│   │           │   ├── tips_list.css
│   │           │   └── ui.css
│   │           └── base.njk
│   ├── content
│   └── templates
│       ├── partials
│       │   ├── blocks
│       │   │   ├── _article_.njk
│       │   │   ├── _comments_.njk
│       │   │   ├── _css_load_.njk
│       │   │   ├── _description_.njk
│       │   │   ├── _favicon_.njk
│       │   │   ├── _feed_.njk
│       │   │   ├── _fonts_.njk
│       │   │   ├── _fonts_inline_.njk
│       │   │   ├── _head_.njk
│       │   │   ├── _nav_.njk
│       │   │   ├── _scripts_.njk
│       │   │   ├── _seo_.njk
│       │   │   └── _styles_.njk
│       │   └── _colophon_.njk
│       ├── base_nocomments.njk
│       ├── base.njk
│       ├── feed.njk
│       └── tips_list.njk
├── .eleventy.js
└── .eleventyignore
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>

  <entry>
    <title>Eleventy settings</title>
    <link href="https://11tytips.netlify.com/tips/eleventy_settings.html"/>
    <updated>2019-09-05T02:00:00+02:00</updated>
    <id>https://11tytips.netlify.com/tips/eleventy_settings.html</id>
    <content type="html">&lt;h2&gt;The Eleventy JavaScript file&lt;/h2&gt;
&lt;p&gt;Eleventy uses a simple Javascript file, named &lt;code&gt;.eleventy.js&lt;/code&gt;
&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;
Because of the leading dot it’s an hidden file.
&lt;/span&gt;&lt;/ins&gt;
, to define the settings of the building environment. This file is located at the root of the source folder but it can be put anywhere, just modifying the Node &lt;code&gt;package.json&lt;/code&gt; file &lt;code&gt;&amp;quot;main&amp;quot;&lt;/code&gt; property. The name itself can also be changed, if you see fit.&lt;/p&gt;
&lt;p&gt;This file defines the settings of the main resources used in the building process: &lt;em&gt;libraries&lt;/em&gt;, &lt;em&gt;shortcodes&lt;/em&gt;, &lt;em&gt;filters&lt;/em&gt;, &lt;em&gt;plugins&lt;/em&gt;, etc. 11tyTips fragments this monolithic file in specific modules, each devoted to the configuration of a resource, all located in the &lt;code&gt;source/build/script/js/11ty/&lt;/code&gt; directory.&lt;/p&gt;
&lt;p&gt;The configuration object returned by the &lt;code&gt;.eleventy.js&lt;/code&gt; module is important because it defines the location of the main parts of the building process: the &lt;code&gt;input&lt;/code&gt; and &lt;code&gt;output&lt;/code&gt; directories, the templates processors, etc.&lt;/p&gt;
&lt;p&gt;11tyTips declares its own set of directories, modifying some of the default names and locations
&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;
For instance, the leading underscore character is suppressed for &lt;code&gt;output&lt;/code&gt;, &lt;code&gt;data&lt;/code&gt; and &lt;code&gt;includes&lt;/code&gt; directories, in lieu of &lt;code&gt;_output&lt;/code&gt;, &lt;code&gt;_data&lt;/code&gt; and &lt;code&gt;_includes&lt;/code&gt;; &lt;code&gt;static&lt;/code&gt; directory is named &lt;code&gt;assets&lt;/code&gt;, etc.
&lt;/span&gt;&lt;/ins&gt;&lt;/p&gt;
</content>
  </entry>

  <entry>
    <title>Global settings</title>
    <link href="https://11tytips.netlify.com/tips/site_settings.html"/>
    <updated>2019-09-06T02:00:00+02:00</updated>
    <id>https://11tytips.netlify.com/tips/site_settings.html</id>
    <content type="html">&lt;h2&gt;Data everywhere&lt;/h2&gt;
&lt;p&gt;Eleventy provides a wide range of settings for &lt;a href=&quot;https://www.11ty.io/docs/data/&quot;&gt;data&lt;/a&gt; used in building stage or inside content: &lt;a href=&quot;https://www.11ty.io/docs/data-global/&quot;&gt;global&lt;/a&gt; data as well as &lt;a href=&quot;https://www.11ty.io/docs/data-template-dir/&quot;&gt;template and directory&lt;/a&gt; data.&lt;/p&gt;
&lt;p&gt;11tyTips uses only global data contained in JavaScript files located inside the data directory.&lt;/p&gt;
&lt;hgroup data--=&quot;code_ref&quot;&gt;
&lt;h5&gt;source/data/settings.js&lt;/h5&gt;
&lt;h6&gt;&lt;a href=&quot;https://prismjs.com&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot; title=&quot;Highlighting provided by Prism.js&quot;&gt;Prism&lt;/a&gt;&lt;/h6&gt;
&lt;/hgroup&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
const _C = require( &#39;./_C.js&#39; )
const SETTINGS_o =
{
  dev_s: _C.DEV_s,
  pro_s: _C.PRO_s,
  git_s: _C.GIT_s,
  twi_s: _C.TWI_s,
  rss_s: _C.RSS_s,
  url_s: null,
  dev_b: true,
  //dev_b: false,
}
;(() =&gt; SETTINGS_o.url_s = SETTINGS_o[SETTINGS_o.dev_b === true ? &#39;dev_s&#39; : &#39;pro_s&#39;])()
console.log( `Site URL: ${SETTINGS_o.url_s}` )
module.exports = SETTINGS_o
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>

  <entry>
    <title>Style guide</title>
    <link href="https://11tytips.netlify.com/tips/styles_guide.html"/>
    <updated>2019-09-07T02:00:00+02:00</updated>
    <id>https://11tytips.netlify.com/tips/styles_guide.html</id>
    <content type="html">&lt;p&gt;&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;h1 element&lt;br&gt;p element (introduction)&lt;/span&gt;&lt;/ins&gt;&lt;/p&gt;
&lt;h1&gt;Style guide&lt;/h1&gt;
&lt;p data--=&quot;page_intro&quot;&gt;This is an introduction paragraph which should be limited in length.&lt;/p&gt;
&lt;p&gt;&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;h2 element&lt;/span&gt;&lt;/ins&gt;&lt;/p&gt;
&lt;h2&gt;Paragraph title_s&lt;/h2&gt;
&lt;p&gt;&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;h3 element&lt;/span&gt;&lt;/ins&gt;&lt;/p&gt;
&lt;h3&gt;Paragraph subtitle_s&lt;/h3&gt;
&lt;p&gt;NB: Titles have a &lt;code&gt;font-style: italic&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;p element&lt;/span&gt;&lt;/ins&gt;&lt;/p&gt;
&lt;p&gt;Paragraph content have a maximum line length fixed to 60ch, yielding to a number of  of about 70 characters per line: this is considered the best line length for readibility.&lt;/p&gt;
&lt;p&gt;&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;inline code&lt;/span&gt;&lt;/ins&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;for( let at = 0; at &amp;lt; keys_a.length; ++at )&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;example&lt;/span&gt;&lt;/ins&gt;&lt;/p&gt;
&lt;p data--=&quot;example&quot;&gt;&lt;code&gt;for( let at = 0; at &amp;lt; keys_a.length; ++at )&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;code block&lt;/span&gt;&lt;/ins&gt;&lt;/p&gt;
&lt;hgroup data--=&quot;code_ref&quot;&gt;
&lt;h5&gt;source/eleventy.js&lt;/h5&gt;
&lt;h6&gt;&lt;a href=&quot;https://prismjs.com&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot; title=&quot;Highlighting provided by Prism.js&quot;&gt;Prism&lt;/a&gt;&lt;/h6&gt;
&lt;/hgroup&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
const ELEVENTY_o =
{
  markdownTemplateEngine: &#39;njk&#39;,
  htmlTemplateEngine:     &#39;njk&#39;,
  dataTemplateEngine:     &#39;njk&#39;,
  templateFormats:        [ &#39;md&#39;,&#39;njk&#39;,&#39;html&#39; ],
  passthroughFileCopy:    true,
  pathPrefix:             &#39;/&#39;,
  dir:
  {
    input:    &#39;.&#39;,
    output:   &#39;../site&#39;,
    data:     &#39;data&#39;,
    includes: &#39;includes&#39;,
    passthru: &#39;assets&#39;,
  },
}
&amp;nbsp;
const DIRS_o =
{
  buildDir_s: &#39;./build/scripts/js/11ty/&#39;,
  contentIncludesDir_s: &#39;./content/includes&#39;,
}
&amp;nbsp;
module.exports = config_o =&gt;
{
  config_o.templateIncludesDir_s = ELEVENTY_o.dir.includes
  config_o.contentIncludesDir_s = DIRS_o.contentIncludesDir_s
  config_o.addPassthroughCopy( &#39;assets&#39; )    //: static files
  ;
  [ &#39;libraries&#39;,
    &#39;shortcodes&#39;,
    &#39;filters&#39;,
    &#39;plugins&#39;,
    &#39;collections&#39;
  ].forEach( config_s =&gt; require( `${DIRS_o.buildDir_s}${config_s}.js` )( config_o ) )
&amp;nbsp;
  return ELEVENTY_o    // : return the config object for further customization
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;
Unordered list:&lt;br&gt;
&lt;code&gt;data--=&amp;quot;ulist&amp;quot;&lt;/code&gt; attribute has to be set on a &lt;em&gt;separate line&lt;/em&gt;
&lt;/span&gt;&lt;/ins&gt;&lt;/p&gt;
&lt;ul data--=&quot;ulist&quot;&gt;
&lt;li&gt;Primo&lt;/li&gt;
&lt;li&gt;Secondo&lt;/li&gt;
&lt;li&gt;Tertio&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;Nested unordered list&lt;/span&gt;&lt;/ins&gt;&lt;/p&gt;
&lt;ul data--=&quot;ulist&quot;&gt;
&lt;li&gt;Primo
&lt;ul data--=&quot;ulist&quot;&gt;
&lt;li&gt;One&lt;/li&gt;
&lt;li&gt;Two&lt;/li&gt;
&lt;li&gt;Three&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Secondo
&lt;ul data--=&quot;ulist&quot;&gt;
&lt;li&gt;Un&lt;/li&gt;
&lt;li&gt;Deux&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Tertio&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;
List inside an inline note
&lt;/span&gt;&lt;/ins&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It works…
&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;
&lt;em&gt;only preceded by a list item&lt;/em&gt;
&lt;ul data--=&quot;ulist&quot;&gt;
&lt;li&gt;One&lt;/li&gt;
&lt;li&gt;Two&lt;/li&gt;
&lt;li&gt;Three
&lt;/span&gt;&lt;/ins&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>

  <entry>
    <title>Names guide</title>
    <link href="https://11tytips.netlify.com/tips/names_guide.html"/>
    <updated>2019-09-08T02:00:00+02:00</updated>
    <id>https://11tytips.netlify.com/tips/names_guide.html</id>
    <content type="html">&lt;h2&gt;A question of names and types&lt;/h2&gt;
&lt;p&gt;Every developer knows that JavaScript is not a static typed language, a useful feature eliminating lots of bugs.
A language like Typescript has been created as a remedy to that important lack of safety. Even for code modules counting less than a few tens of lines, it’s easy to forget what kind of type is exactly a variable or constant declared at the begining of the file and then make a mistake when assining a wrong type to a variable.&lt;/p&gt;
&lt;p&gt;11tyTips adopts a simple recipe to avoid such mistakes: only adding a mnemonic letter at the end of each identifier to specify the variable or constant type.
This simple adjonction has a secondary benefice: it simplifies the identifier derivations.&lt;/p&gt;
&lt;p&gt;Just an example: the JavaScript &lt;code&gt;String.prototype.split&lt;/code&gt; method returns an array of Strings:&lt;/p&gt;
&lt;hgroup data--=&quot;code_ref&quot;&gt;
&lt;h5&gt;MDN web doc&lt;/h5&gt;
&lt;h6&gt;&lt;a href=&quot;https://prismjs.com&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot; title=&quot;Highlighting provided by Prism.js&quot;&gt;Prism&lt;/a&gt;&lt;/h6&gt;
&lt;/hgroup&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
var str = &#39;The quick brown fox jumps over the lazy dog.&#39;;
var words = str.split(&#39; &#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Two different words for two tightly related entities! Isn’t it semantically more meaningful to use the same identifier with different specifiers?&lt;/p&gt;
&lt;hgroup data--=&quot;code_ref&quot;&gt;
&lt;h5&gt;11tyTips: Pseudo-typed identifiers&lt;/h5&gt;
&lt;h6&gt;&lt;a href=&quot;https://prismjs.com&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot; title=&quot;Highlighting provided by Prism.js&quot;&gt;Prism&lt;/a&gt;&lt;/h6&gt;
&lt;/hgroup&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
var lazyDog_s = &#39;The quick brown fox jumps over the lazy dog.&#39;;
var lazyDog_a = lazyDog_s.split(&#39; &#39;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A more tricky example
&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;
With smart inline type coercion tricks!
&lt;/span&gt;&lt;/ins&gt;
:&lt;/p&gt;
&lt;hgroup data--=&quot;code_ref&quot;&gt;
&lt;h5&gt;11tyTips: Tricky pseudo-typed identifiers&lt;/h5&gt;
&lt;h6&gt;&lt;a href=&quot;https://prismjs.com&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot; title=&quot;Highlighting provided by Prism.js&quot;&gt;Prism&lt;/a&gt;&lt;/h6&gt;
&lt;/hgroup&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
const oneTwoThree_s = &#39;123&#39;
let   oneTwoThree_n = +oneTwoThree_s          //: to Number
const oneTwoFour_s  = &#39;&#39; + ++oneTwoThree_n    //: to String
&lt;/code&gt;&lt;/pre&gt;
&lt;h3&gt;Types specifiers&lt;/h3&gt;
&lt;p&gt;This naming recipe applies to all primitive immutable types:&lt;/p&gt;
&lt;ul data--=&quot;ulist&quot;&gt;
&lt;li&gt;Null&lt;/li&gt;
&lt;li&gt;Undefined&lt;/li&gt;
&lt;li&gt;Boolean&lt;/li&gt;
&lt;li&gt;Number&lt;/li&gt;
&lt;li&gt;BigInt&lt;/li&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Array&lt;/li&gt;
&lt;li&gt;Object&lt;/li&gt;
&lt;li&gt;Symbol&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It extends to specific Object types:&lt;/p&gt;
&lt;ul data--=&quot;ulist&quot;&gt;
&lt;li&gt;Function&lt;/li&gt;
&lt;li&gt;Class&lt;/li&gt;
&lt;li&gt;RegExp&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The suffix specifying the type is a single letter preceded by an underscore character, lowercase letters for “wrapped” types
&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;
Boolean, Number, BigInt, String, Array, Object, Symbol, Function, Class, RegExp.
See &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Primitive&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot;&gt; MDN Primitive description&lt;/a&gt;.
&lt;/span&gt;&lt;/ins&gt;
, uppercase letters for “unwrapped” types
&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;
Null, Undefined.
&lt;/span&gt;&lt;/ins&gt;
.&lt;/p&gt;
&lt;table class=&quot;middle_wide&quot;&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Specifier&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Null&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;_&lt;em&gt;N&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Undefined&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;_&lt;em&gt;U&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;_&lt;em&gt;b&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Number&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;_&lt;em&gt;n&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;BigInt&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;_&lt;em&gt;i&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;String&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;_&lt;em&gt;s&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Array&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;_&lt;em&gt;a&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Object&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;_&lt;em&gt;o&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Symbol&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;_&lt;em&gt;y&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Function&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;_&lt;em&gt;f&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Class&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;_&lt;em&gt;c&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RegExp&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;_&lt;em&gt;r&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;To give further meaningful information, function identifiers have different specifiers:
in an assignment, the previous convention is used, but for a declaration,
two underscore characters before the type specifier of the return value is used and no specifier when the function returns nothing.&lt;/p&gt;
&lt;p data--=&quot;example&quot;&gt;&lt;code&gt;const awesome__s = () =&amp;gt; &#39;An awesome String&#39;&lt;/code&gt;&lt;/p&gt;
&lt;p data--=&quot;example&quot;&gt;&lt;code&gt;const clone_f = awesome__s&lt;/code&gt;&lt;/p&gt;
&lt;hgroup data--=&quot;code_ref&quot;&gt;
&lt;h5&gt;11tyTips/source/includes/assets/scripts/js/partials/dom.js&lt;/h5&gt;
&lt;h6&gt;&lt;a href=&quot;https://prismjs.com&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot; title=&quot;Highlighting provided by Prism.js&quot;&gt;Prism&lt;/a&gt;&lt;/h6&gt;
&lt;/hgroup&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
const DOM_siblings__a = selector_s =&gt;
{
  const node_e = document.querySelector( selector_s )
  return !node_e ?
    null :
    Array.prototype.filter
      .call( node_e.parentNode.children, sibling =&gt; sibling !== node_e )
}
&amp;nbsp;
const DOM_listReverse = selector_s =&gt;
{
  const nodes_a = Array.prototype.slice.call(document.querySelectorAll( `${selector_s} li` ))
  nodes_a.forEach( node_e =&gt; node_e.parentNode.insertBefore( node_e, node_e.parentNode.firstChild ) )
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The previous code shows an &lt;strong&gt;exception&lt;/strong&gt; to the specifiers convention used: for &lt;code&gt;DOM&lt;/code&gt; elements, it seems more appropriate to use the &lt;code&gt;_e&lt;/code&gt; suffix than the &lt;code&gt;_o&lt;/code&gt; suffix used for &lt;code&gt;Object&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This useful convention is used not only in JavaScript context but also in Nunjucks context. However, in templates, variable identifiers are prefixed with an &lt;em&gt;underscore&lt;/em&gt; character:&lt;/p&gt;
&lt;p data--=&quot;example&quot;&gt;&lt;code&gt;{% set _URL_s = settings.url_s %}&lt;/code&gt;&lt;/p&gt;
</content>
  </entry>

  <entry>
    <title>Front matter</title>
    <link href="https://11tytips.netlify.com/tips/frontmatter_data.html"/>
    <updated>2019-09-09T02:00:00+02:00</updated>
    <id>https://11tytips.netlify.com/tips/frontmatter_data.html</id>
    <content type="html">&lt;h2&gt;Front matter data&lt;/h2&gt;
&lt;p&gt;Each Markdown file has its own data, declared at the begining of the file in the front matter part
&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;
11tyTips uses a JavaScript &lt;code&gt;Object&lt;/code&gt; for the front matter.
&lt;/span&gt;&lt;/ins&gt;
, a few ones being mandatory
&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;
No so strickly speaking! For instance, you’re not requested to use a Date, but it’s more than useful if you want to sort your posts by date.
&lt;/span&gt;&lt;/ins&gt;
, others being used to supply some page specific content or variables
&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;
Have a look at &lt;a href=&quot;https://11ty.io/docs/data-frontmatter/#user-defined-front-matter-customizations&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot;&gt;Eleventy#user-defined-front-matter-customizations&lt;/a&gt; for a list of Eleventy properties usable in front matter.
&lt;/span&gt;&lt;/ins&gt;
.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Mandatory data&lt;/em&gt;&lt;/p&gt;
&lt;ul data--=&quot;ulist&quot;&gt;
&lt;li&gt;Date
&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;
The Date property is mainly used to sort the posts but also to be shown it on the page.
&lt;/span&gt;&lt;/ins&gt;&lt;/li&gt;
&lt;li&gt;Layout
&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;
This is the template used to render the page.
&lt;/span&gt;&lt;/ins&gt;&lt;/li&gt;
&lt;li&gt;Permalink
&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;
This is the name of the output file: HTML, or any other format (e.g. minified JavaScript).
&lt;/span&gt;&lt;/ins&gt;&lt;/li&gt;
&lt;li&gt;Tags
&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;
The collection(s) including the output file.
&lt;/span&gt;&lt;/ins&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;em&gt;Specific data&lt;/em&gt;&lt;/p&gt;
&lt;ul data--=&quot;ulist&quot;&gt;
&lt;li&gt;Title
&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;
Used by 11tyTips to identify the page in the browser tab.
&lt;/span&gt;&lt;/ins&gt;&lt;/li&gt;
&lt;li&gt;Subtitle
&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;
Used by 11tyTips to describe the page content in the Tips list menu.
&lt;/span&gt;&lt;/ins&gt;&lt;/li&gt;
&lt;li&gt;Abstract
&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;
Actually not used by 11tyTips, but could be…
&lt;/span&gt;&lt;/ins&gt;&lt;/li&gt;
&lt;li&gt;Author
&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;
Useful if there are multiple authors for the posts of the site.
&lt;/span&gt;&lt;/ins&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hgroup data--=&quot;code_ref&quot;&gt;
&lt;h5&gt;Page front matter data&lt;/h5&gt;
&lt;h6&gt;&lt;a href=&quot;https://prismjs.com&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot; title=&quot;Highlighting provided by Prism.js&quot;&gt;Prism&lt;/a&gt;&lt;/h6&gt;
&lt;/hgroup&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
---js
{
  date:      `2019-09-06`,
  layout:    `templates/base.njk`,
  permalink: `tips/frontmatter_data.html`,
  tags:      [ `tip` ],
&amp;nbsp;
  title_s:     `Front matter`,
  subtitle_s:  `Front matter data access`,
  abstract_s:  `Accessing front matter data in Markdown and templates`,
  author_s:    `Octoxalis`,
}
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To access any property declared in the front matter it has to be enclosed in double parenthesis &lt;code&gt;{{ ... }}&lt;/code&gt;
&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;
11tyTips uses Nunjucks. Using other templating systems, this is a bit different.
&lt;/span&gt;&lt;/ins&gt;
. For instance, the &lt;code&gt;abstract_s&lt;/code&gt; property in the front matter is injected in this page with the following code: &lt;code&gt;{{ abstract_s }}&lt;/code&gt; and renders as:&lt;br&gt;
&lt;q&gt;Accessing front matter data in Markdown and templates&lt;/q&gt;.&lt;/p&gt;
&lt;h2&gt;Function properties&lt;/h2&gt;
&lt;p&gt;If you use JavaScript for the front matter
&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;
A very good idea because it gives you the full power of the language to process your content.
&lt;/span&gt;&lt;/ins&gt;
and Nunjucks as templating system, you can declare functions as properties
&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;
See &lt;a href=&quot;https://11ty.io/docs/data-frontmatter/#javascript-front-matter&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot;&gt;Eleventy#javascript-front-matter&lt;/a&gt; documentation page.
&lt;/span&gt;&lt;/ins&gt;
. Usually, apart very specific cases, it’s much more easy to declare content processing functions in a module located inside the data directory
&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;
Because it will be accessible from any Markdown content or any template and with the possibility to require any Node package that could be useful.
&lt;/span&gt;&lt;/ins&gt;
.&lt;/p&gt;
&lt;p&gt;However, 11tyTips tips list menu is such a case: the &lt;code&gt;rank__s&lt;/code&gt; property calls the &lt;code&gt;String.prototype.padStart&lt;/code&gt; method to add one or two &lt;code&gt;0&lt;/code&gt; before the tip rank to normalize it and is called this way:&lt;/p&gt;
&lt;p data--=&quot;example&quot;&gt;&lt;code&gt;&amp;lt;span&amp;gt;{{ rank__s(tip_n) }}&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;hgroup data--=&quot;code_ref&quot;&gt;
&lt;h5&gt;11tyTips/source/includes/templates/tips_list.njk&lt;/h5&gt;
&lt;h6&gt;&lt;a href=&quot;https://prismjs.com&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot; title=&quot;Highlighting provided by Prism.js&quot;&gt;Prism&lt;/a&gt;&lt;/h6&gt;
&lt;/hgroup&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
---js
{
  rank__s: at_n =&gt; `#${(&#39;&#39; + at_n).padStart( 3, &#39;0&#39; )}`
}
---
&amp;nbsp;
&amp;lt;menu data--=&amp;quot;tips_menu&amp;quot;&amp;gt;
  &amp;lt;h4&amp;gt;&amp;lt;a href=&amp;quot;{{ settings.url_s }}&amp;quot;&amp;gt;Home&amp;lt;/a&amp;gt;&amp;lt;/h4&amp;gt;
  &amp;lt;h4&amp;gt;→ &amp;lt;a href=&amp;quot;{{ settings.git_s }}&amp;quot; target=&amp;quot;_blank&amp;quot; rel=&amp;quot;noreferrer&amp;quot;&amp;gt;Github&amp;lt;/a&amp;gt;&amp;lt;/h4&amp;gt;
  &amp;lt;h4&amp;gt;→ &amp;lt;a href=&amp;quot;{{ settings.twi_s }}&amp;quot; target=&amp;quot;_blank&amp;quot; rel=&amp;quot;noreferrer&amp;quot;&amp;gt;Twitter&amp;lt;/a&amp;gt;&amp;lt;/h4&amp;gt;
  &amp;lt;h4&amp;gt;→ &amp;lt;a href=&amp;quot;{{ settings.rss_s }}&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;RSS&amp;lt;/a&amp;gt;&amp;lt;/h4&amp;gt;
  &amp;lt;h2 data--=&amp;quot;tips_order&amp;quot;&amp;gt;All the tips&amp;lt;/h2&amp;gt;
  &amp;lt;ol data--=&amp;quot;tips_list&amp;quot;&amp;gt;
  {% for _tip_o in collections.tip %}
    &amp;lt;li data--=&amp;quot;tips_entry&amp;quot;&amp;gt;
      &amp;lt;span&amp;gt;{{ rank__s(loop.index) }}&amp;lt;/span&amp;gt;
      &amp;lt;a href=&amp;quot;{{ _tip_o.url | url }}&amp;quot;&amp;gt;{{ _tip_o.data.title_s }}&amp;lt;/a&amp;gt;
      &amp;lt;span&amp;gt;{{ _tip_o.data.subtitle_s }}&amp;lt;/span&amp;gt;
    &amp;lt;/li&amp;gt;
  {% endfor %}
  &amp;lt;/ol&amp;gt;
&amp;lt;/menu&amp;gt;
&amp;nbsp;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;But the same result would have been possible calling directly the &lt;code&gt;padStart&lt;/code&gt; method inside the template
&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;
Nevertheless, my prefered solution is the property function because it’s more readable.
&lt;/span&gt;&lt;/ins&gt;
:&lt;/p&gt;
&lt;p data--=&quot;example&quot;&gt;&lt;code&gt;&amp;lt;span&amp;gt;#{{ (&#39;&#39; + tip_n).padStart( 3, &#39;0&#39; ) }}&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Front matter properties and global data functions&lt;/h2&gt;
&lt;p&gt;11tyTips is full of Eleventy documentation links: we need official references! Some of these references can appear in different pages and therefore they are potential global data. 11tyTips source has an &lt;code&gt;utils.js&lt;/code&gt; file inside its &lt;code&gt;data/lib&lt;/code&gt; directory where a &lt;code&gt;EleventyLink__s&lt;/code&gt; function compute the link to any Eleventy docs page using an acronym of the page and anchor.&lt;/p&gt;
&lt;hgroup data--=&quot;code_ref&quot;&gt;
&lt;h5&gt;11tyTips/source/data/lib/utils.js&lt;/h5&gt;
&lt;h6&gt;&lt;a href=&quot;https://prismjs.com&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot; title=&quot;Highlighting provided by Prism.js&quot;&gt;Prism&lt;/a&gt;&lt;/h6&gt;
&lt;/hgroup&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
EleventyLink__s: ( key_s ) =&gt;
{
  const path_s = _C[ `eleventy_${key_s}` ]
  const anchor_n = path_s.indexOf( &#39;#&#39;)
  if ( anchor_n === -1 )
  {
    console.log( `No anchor found in path ${path_s}` )
    return
  }
  const anchor_s = path_s.substring( anchor_n )
  const anchorLink_s = _C.ELEVENTY_s.replace( &#39;]&#39;, `${anchor_s}]`) + path_s
  return [anchorLink_s.substring( 0, anchorLink_s.indexOf( &#39;:&#39;) ), anchorLink_s]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The acronyms, used as keys
&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;
&lt;code&gt;jfm_s&lt;/code&gt; is the acronym of &lt;code&gt;#javascript-front-matter&lt;/code&gt;,
&lt;code&gt;udf_s&lt;/code&gt; is the acronym of &lt;code&gt;#user-defined-front-matter-customizations&lt;/code&gt;.
Usually three charachters are enough to get a unique identifier.
&lt;/span&gt;&lt;/ins&gt;
, could be set inside each page front matter and used as a key by the function to expand the actual link reference.&lt;/p&gt;
&lt;p&gt;Hence to get the &lt;em&gt;reference-style link&lt;/em&gt; and the &lt;em&gt;link&lt;/em&gt; itself is just as easy as:&lt;/p&gt;
&lt;p data--=&quot;example&quot;&gt;&lt;code&gt;{{ lib.utils.EleventyLink__s( &#39;jfm_s&#39; )[0] }}&lt;/code&gt;&lt;br&gt;
&lt;code&gt;{{ lib.utils.EleventyLink__s( &#39;jfm_s&#39; )[1] }}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Actually, most of Eleventy link keys are gathered in the &lt;code&gt;_C.js&lt;/code&gt; global data file and not in the front matter!&lt;/p&gt;
&lt;h3&gt;Even shorter&lt;/h3&gt;
&lt;p&gt;But we can do more, using Nunjucks &lt;code&gt;set&lt;/code&gt; tag in each Markdown file referencing an Eleventy documentation page, then call the link function as in the following examples:&lt;/p&gt;
&lt;p data--=&quot;example&quot;&gt;&lt;code&gt;{{ _link_f( &#39;jfm_s&#39; )[1] }}&lt;/code&gt;
&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;
Link located in Links section, after the Aliases section.
&lt;/span&gt;&lt;/ins&gt;&lt;/p&gt;
&lt;p data--=&quot;example&quot;&gt;&lt;code&gt;{{ _link_f( &#39;jfm_s&#39; )[0] }}&lt;/code&gt;
&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;
reference-style link inside content.
&lt;/span&gt;&lt;/ins&gt;&lt;/p&gt;
&lt;hgroup data--=&quot;code_ref&quot;&gt;
&lt;h5&gt;11tyTips/source/content/posts/frontmatter_data.md&lt;/h5&gt;
&lt;h6&gt;&lt;a href=&quot;https://prismjs.com&quot; target=&quot;_blank&quot; rel=&quot;noreferrer&quot; title=&quot;Highlighting provided by Prism.js&quot;&gt;Prism&lt;/a&gt;&lt;/h6&gt;
&lt;/hgroup&gt;
&lt;pre&gt;&lt;code class=&quot;language-javascript&quot;&gt;
&amp;nbsp;
[comment]: # (======== Aliases ========)
{% set _link_f = lib.utils.EleventyLink__s %}
&amp;nbsp;
[comment]: # (======== Links ========)
{{ _link_f( &#39;jfm_s&#39; )[1] }}
{{ _link_f( &#39;udf_s&#39; )[1] }}
&amp;nbsp;
[comment]: # (======== Post ========)
&amp;nbsp;
&lt;/code&gt;&lt;/pre&gt;
</content>
  </entry>

  <entry>
    <title>Shortcodes</title>
    <link href="https://11tytips.netlify.com/tips/shortcodes.html"/>
    <updated>2019-09-10T02:00:00+02:00</updated>
    <id>https://11tytips.netlify.com/tips/shortcodes.html</id>
    <content type="html">&lt;h2&gt;A corner stone&lt;/h2&gt;
&lt;p&gt;Shortcodes are probably the most powerful tool to process Markdown content inline. They are simple to create and use, almost anything can be done with them, and they represent an important opportunity that should not be missed. Eleventy has two kinds of shortcode:&lt;/p&gt;
&lt;ul data--=&quot;ulist&quot;&gt;
&lt;li&gt;simple
&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;
the shortcode argument (i.e. content) is passed to a single tag (ex. #1).
&lt;/span&gt;&lt;/ins&gt;&lt;/li&gt;
&lt;li&gt;paired
&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;
the shortcode argument is passed enclosed between two tags (ex. #2).
&lt;/span&gt;&lt;/ins&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p data--=&quot;example&quot;&gt;&lt;code&gt;{% _shortcode_id &amp;quot;argument&amp;quot; %}&lt;/code&gt;&lt;/p&gt;
&lt;p data--=&quot;example&quot;&gt;&lt;code&gt;{% _shortcode_id %}... Content to be processed ...{% end_shortcode_id %}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;11tyTips doesn’t use a lot of shortcodes, but they are essential to its content. Let’s dissect the most omnipresent of it: the &lt;code&gt;_code_block&lt;/code&gt; paired shortcode.
It is passed to Eleventy configuration method &lt;code&gt;addPairedShortcode&lt;/code&gt; this way:&lt;/p&gt;
&lt;p data--=&quot;example&quot;&gt;&lt;code&gt;config_o.addPairedShortcode(&#39;_code_block&#39;, content_s =&amp;gt; CODES_o.code_block__s( content_s ) )&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Here, &lt;code&gt;_code_block&lt;/code&gt; is the shortcode identifier
&lt;ins data--=&quot;inline_note&quot;&gt;&lt;sup&gt;&lt;/sup&gt;&lt;span data--=&quot;note_content&quot;&gt;
11tyTips uses a leading underscore character because the shortcode closing tag adds the word &lt;code&gt;end&lt;/code&gt; before the shortcode identifier: &lt;code&gt;end_shortcode&lt;/code&gt; is more readable than &lt;code&gt;endshortcode&lt;/code&gt;, isn’t it?
&lt;/span&gt;&lt;/ins&gt;&lt;/p&gt;
</content>
  </entry>
</feed>